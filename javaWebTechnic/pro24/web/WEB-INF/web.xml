<?xml version="1.0" encoding="UTF-8"?>
<!--	•	XML 파일의 버전과 인코딩 방식을 지정합니다. -->
<!--이 요소는 웹 애플리케이션의 루트 요소로, Java EE 3.0 버전을 사용하고 있음을 나타냅니다.
xmlns와 xsi:schemaLocation 속성은 XML 네임스페이스와 스키마 위치를 정의해 XML 문서의 구조를 검증합니다.-->
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  id="WebApp_ID" version="3.0">

  <!--이 부분은 ContextLoaderListener를 등록하는 것으로, Spring 애플리케이션 컨텍스트를 초기화하고 관리하는 역할을 합니다.
  애플리케이션이 시작될 때 Spring의 설정 파일을 로드하고, 애플리케이션이 종료될 때 이를 정리합니다.-->
  <listener>
    <listener-class>
      org.springframework.web.context.ContextLoaderListener
    </listener-class>
  </listener>
  <!--context-param은 Spring 애플리케이션 컨텍스트의 설정 파일을 지정하는데 사용됩니다.
	contextConfigLocation은 Spring이 초기화할 때 로드할 설정 파일의 위치를 지정합니다.
	여기서는 action-mybatis.xml과 action-service.xml 두 개의 설정 파일을 로드합니다.-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
      /WEB-INF/config/action-mybatis.xml
      /WEB-INF/config/action-service.xml
    </param-value>
  </context-param>

  <!--이 부분은 Spring MVC에서 핵심 역할을 하는 DispatcherServlet을 정의합니다.
    servlet-name으로 action이라는 이름을 지정했고, 해당 서블릿이 웹 애플리케이션이 시작될 때 로드되도록
    load-on-startup을 1로 설정했습니다. 이는 이 서블릿이 애플리케이션 시작 시점에 바로 로드됨을 의미합니-->
  <servlet>
    <servlet-name>action</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <!--DispatcherServlet이 매핑될 URL 패턴을 지정합니다.
  여기서는 .do로 끝나는 모든 요청을 action 서블릿으로 처리하겠다는 의미입니다.-->
  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

</web-app>